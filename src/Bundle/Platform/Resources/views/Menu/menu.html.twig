{#
# This file is part of SolidInvoice project.
#
# (c) Pierre du Plessis <open-source@solidworx.co>
#
# This source file is subject to the MIT license that is bundled
# with this source code in the file LICENSE.
#}

{% extends 'knp_menu.html.twig' %}
{% import 'knp_menu.html.twig' as ui %}

{% block list %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% if item.level == 0 %}
            <ul{{ ui.attributes(listAttributes|merge({'class': 'navbar-nav pt-lg-3'})) }}>
                {{ block('children') }}
            </ul>
        {% else %}
            {% set ddClass = 'dropdown-menu' ~ ( (matcher.isCurrent(item) or matcher.isAncestor(item, options.matchingDepth)) ? ' show' : '' ) %}
            <div class="{{ ddClass }}" data-bs-popper="static">
                <div class="dropdown-menu-columns">
                    <div class="dropdown-menu-column">
                        {{ block('children') }}
                    </div>
                </div>
            </div>
        {% endif %}
    {% endif %}
{% endblock %}

{% block item %}
    {#{% if item.displayed and (item.extras.role is not defined or (is_granted(item.extras.role))) %}#}
    {% if item.displayed %}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass, 'active']) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass, 'active']) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set tag = '' %}

        {% if item.parent.isRoot %}
            {%- set classes = classes|merge(['nav-item']) %}
            {%- set tag = 'li' %}
        {% endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({class: classes|join(' ')}) %}
        {%- endif %}

        {% if tag is not empty %}
            <{{ tag }}{{ ui.attributes(attributes) }}>
        {% endif %}

        {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
            {% set linkAttributes = item.linkAttributes|merge({'class': (not item.parent.isRoot ? 'dropdown-item' : 'nav-link') ~ (matcher.isCurrent(item) ? ' active')}) %}
            {{ block('linkElement') }}
        {%- else %}
            {{ block('spanElement') }}
        {%- endif %}

        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
        {%- set listAttributes = item.childrenAttributes|merge({class: childrenClasses|join(' ')}) %}
        {{ block('list') }}

        {% if tag is not empty %}
            </{{ tag }}>
        {% endif %}
    {% endif %}
{% endblock %}

{% block spanElement %}
    {% if item.hasChildren and item.displayChildren %}
        <a href="#" class="{{ item.parent.isRoot ? 'nav-link' : 'dropdown-item' }} dropdown-toggle{{ matcher.isCurrent(item) or matcher.isAncestor(item, options.matchingDepth) ? ' show' }}" data-bs-toggle="dropdown" data-bs-auto-close="false" role="button" aria-expanded="{{ matcher.isCurrent(item) or matcher.isAncestor(item, options.matchingDepth) ? 'true' : 'false' }}">
            {% if item.extras.icon is defined %}
                <span class="nav-link-icon d-md-none d-lg-inline-block">
                    {{ ux_icon('tabler:' ~ item.extras.icon) }}
                </span>
            {% endif %}
            <span class="nav-link-title">
                {{ block('label') }}
            </span>
        </a>
    {% else %}
        <span{{ ui.attributes(item.labelAttributes) }}>{{ block('label') }}</span>
    {% endif %}
{% endblock %}

{% block linkElement %}
    <a href="{{ item.uri }}"{{ ui.attributes(item.linkAttributes|merge(linkAttributes|default({}))) }}>
        {% if item.extras.icon is defined %}
            <span class="nav-link-icon d-md-none d-lg-inline-block">
                {{ ux_icon('tabler:' ~ item.extras.icon) }}
            </span>
        {% endif %}
        <span class="nav-link-title">
            {{ block('label') }}
        </span>
    </a>
{% endblock %}

{% block label %}
    {% if options.allow_safe_labels and item.getExtra('safe_label', false) %}
        {{ item.label|trans|raw }}
    {% else %}
        {{ item.label|trans }}
    {% endif %}
{% endblock %}
